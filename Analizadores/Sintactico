package Analizadores; 
import java_cup.runtime.*;
import java.util.ArrayList;
import com.mycompany.proyecto1_olc1_201807088.*;
import Errores.*;

parser code 
{:
    public static Expresion_Regular er = new Expresion_Regular();
    public ArrayList<Excepcion> ErroresSintacticos = new ArrayList();
    
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
       new Errores("Sintactico", "Error en la sintaxis detectado. Se detecto: " +s.value, s.left+"",s.right+"");
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        new Errores("Sintactico", "Error irrecuperable. Se detecto:" +s.value, s.left+"",s.right+"");
    }  
:} 

terminal String CONJUNTO;
terminal String VIR,GUION,MQUE,LLAVEI,LLAVED,DPUNTOS,PUNTO,INTERR,PTCOMA,BARRA,MAS,POR,PORC;
terminal String ENTERO,RAN,ALFAMAY,ALFAMIN,COMILLA,COMA,COMILLASIMPLE,INVERBARRA,ASCII,TODO;
non terminal ini,expresion,expresion2,conjuntos,listainstrucciones;
non terminal instrucciones,n_exp,alfabeto,conj,conj2;
non terminal instruccion,combinacion,comilla,subconj,lect,lect2;


start with ini; 

ini::=instrucciones;

instrucciones ::= 
   LLAVEI  listainstrucciones LLAVED {:Errores.ReporteErrores();:}
; 

listainstrucciones::=
    listainstrucciones instruccion
 |  instruccion
;

instruccion ::= 
   conj 
 | n_exp 
 | PORC PORC {:er.Separacion();:}
 | lect
 | error PTCOMA 
;

conj::=
    CONJUNTO DPUNTOS RAN:a GUION MQUE  conjuntos PTCOMA 
;

conjuntos ::=   
    ALFAMIN VIR ALFAMIN
 |  ALFAMAY VIR ALFAMAY 
 |  ENTERO  VIR ENTERO   
 |  ASCII   VIR ASCII
 |  subconj
;

subconj::=
    ALFAMIN  conj2
 |  ALFAMAY  conj2
 |  ENTERO   conj2
 |  ASCII    conj2
;

conj2::=
    COMA subconj
 |  ALFAMIN:b 
 |  ALFAMAY:b 
 |  ENTERO:b  
 |  ASCII
 |  
;


n_exp ::=
    RAN:b   GUION MQUE  expresion:a PTCOMA  {:er.ER((String)a, b);:}
;

expresion ::=
    INTERR:a comilla:b          {:RESULT=(String)a+(String)b;:}
 |  INTERR:a alfabeto:b         {:RESULT=(String)a+(String)b;:}
 |  POR:a expresion2:b          {:RESULT=(String)a+(String)b;:}
 |  POR:a alfabeto:b            {:RESULT=(String)a+(String)b;:}
 |  PUNTO:a combinacion:b       {:RESULT=(String)a+(String)b;:}
 |  BARRA:a combinacion:b       {:RESULT=(String)a+(String)b;:}
 |  MAS:a alfabeto:b            {:RESULT=(String)a+(String)b;:}
 |  MAS:a expresion2:b          {:RESULT=(String)a+(String)b;:}
 |  INTERR:a expresion2:b       {:RESULT=(String)a+(String)b;:}
;

expresion2::=
    PUNTO:a combinacion:b   {:RESULT=(String)a+(String)b;:}
 |  BARRA:a combinacion:b   {:RESULT=(String)a+(String)b;:}
;   

combinacion::=
    alfabeto:a expresion:b  {:RESULT=(String)a+(String)b;:}
 |  alfabeto:a alfabeto:b   {:RESULT=(String)a+(String)b;:}
 |  alfabeto:a comilla:b    {:RESULT=(String)a+(String)b;:}
 |  expresion:a alfabeto:b  {:RESULT=(String)a+(String)b;:}
 |  expresion:a comilla:b   {:RESULT=(String)a+(String)b;:}
 |  expresion:a expresion:b {:RESULT=(String)a+(String)b;:}
 |  comilla:a expresion:b   {:RESULT=(String)a+(String)b;:}
 |  comilla:a alfabeto:b    {:RESULT=(String)a+(String)b;:}
 |  comilla:a comilla:b     {:RESULT=(String)a+(String)b;:}
;

alfabeto::=
    LLAVEI RAN:a LLAVED     {:RESULT="{"+(String)a+"}";:};

comilla::=
    COMILLA:a RAN:b COMILLA:c               {:RESULT=(String)a+(String)b+(String)c;:}
 |  COMILLA:a ENTERO:b COMILLA:c            {:RESULT=(String)a+(String)b+(String)c;:}
 |  COMILLA:a PUNTO:b  COMILLA:c            {:RESULT=(String)a+(String)b+(String)c;:}
 |  COMILLA:a ASCII:b  COMILLA:c            {:RESULT=(String)a+(String)b+(String)c;:}
 |  INVERBARRA:a COMILLASIMPLE:b            {:RESULT=(String)a+(String)b;:}
 |  INVERBARRA:a ALFAMIN:b                  {:RESULT=(String)a+(String)b;:}
 |  COMILLA GUION:a  COMILLA                 {:RESULT="\""+(String)a+"\"";:}
 |  COMILLA DPUNTOS:a  COMILLA              {:RESULT="\""+(String)a+"\"";:}
 |  COMILLA VIR:a  COMILLA                  {:RESULT="\""+(String)a+"\"";:}
 |  COMILLA MQUE:a  COMILLA               {:RESULT="\""+(String)a+"\"";:}
 |  COMILLA LLAVEI:a  COMILLA               {:RESULT="\""+(String)a+"\"";:}
 |  COMILLA LLAVED:a  COMILLA               {:RESULT="\""+(String)a+"\"";:}
 |  COMILLA INTERR:a  COMILLA               {:RESULT="\""+(String)a+"\"";:}
 |  COMILLA PTCOMA:a  COMILLA               {:RESULT="\""+(String)a+"\"";:}
 |  COMILLA BARRA:a  COMILLA                {:RESULT="\""+(String)a+"\"";:}
 |  COMILLA MAS:a  COMILLA                  {:RESULT="\""+(String)a+"\"";:}
 |  COMILLA POR:a  COMILLA                  {:RESULT="\""+(String)a+"\"";:}
 |  COMILLA PORC:a  COMILLA                 {:RESULT="\""+(String)a+"\"";:}
 |  COMILLA  COMILLA                        {:RESULT = "\" \"";:}
;


lect::=
    RAN:a   DPUNTOS COMILLA lect2 COMILLA PTCOMA 
;

lect2::=
    TODO:b   {:RESULT=(String)b;:} 
;
